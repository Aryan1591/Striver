
class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    static long inversionCount(long arr[], long N)
    {
        long temp[]=new long[(int)N];
        long ans=Solution.merge(arr,temp,0,arr.length-1);
           return ans;
    }
    static long merge(long a[],long temp[],int low,int high)
    {
         long inv_count=0;
         int mid=0;
          if(low<high)
          {
              mid=(low+high)/2;
              inv_count+=merge(a,temp,low,mid);
              inv_count+=merge(a,temp,mid+1,high);
              inv_count+=Solution.merge(a,temp,low,mid+1,high);
              
          }
           return inv_count;
    }
     static long merge(long a[],long temp[],int low,int mid,int high)
     {
         long ans=0L;
          int i=low;
          int j=mid;
          int k=low;
          while((i<=mid-1) && (j<=high))
          {
               if(a[i]<=a[j])
               {
                   temp[k++]=a[i++];
               }
               else{
                   temp[k++]=a[j++];
                    ans=ans+(mid-i);
               }
          }
          while(i<=mid-1)
          {
              temp[k++]=a[i++];
          }
          while(j<=high)
          {
              temp[k++]=a[j++];
          }
          for(i=low;i<=high;i++)
          {
              a[i]=temp[i];
          }
          return ans;
     }
}