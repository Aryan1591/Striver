class Solution {
    public int longestConsecutive(int[] nums) {
        int ans=1;
          if(nums.length==0)
          {
              return 0;
          }
        HashSet<Integer>h=new HashSet<Integer>();
         for(int i=0;i<nums.length;i++)
         {
             h.add(nums[i]);
         }
         for(int i=0;i<nums.length;i++)
         {
             int key=nums[i];
              if(h.contains(key-1))
              {
                  continue;
              }
              else{
                  int count=0;
                   while(h.contains(key))
                   {
                       count++;
                       key++;
                   }
                  ans=Math.max(ans,count);
              }
         }
        return ans;
    }
}












/*brute force

class Solution {
    public int longestConsecutive(int[] nums) {
        Arrays.sort(nums);
         int ans=0;
         int i=0;
         for( i=0;i<nums.length;i++)
         {
             int count=1;
             int j=i;
             while(j+1<nums.length && (nums[j]+1==nums[j+1] || nums[j]==nums[j+1]))
             {
                  if(nums[j]==nums[j+1])
                  {
                      j++;
                  }else{
                 count++;
                 j++;}
             }
             i=j;
             ans=Math.max(count,ans);
             
         }
        return ans;
    }
}

*/