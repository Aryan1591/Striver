










/* My approach*/






class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character>h=new HashSet<Character>();
        int ans=0;
     
        int prev=0;
        int j=0;
        int i=0;
         for( i=0;i<s.length();i++)
         {
               j=i;
             
               while(j<s.length())
               {
                    if(!h.contains(s.charAt(j)))
                    {
                        h.add(s.charAt(j));
                        // count++;
                    }
                   else{
                       ans=Math.max(ans,j-prev);
                    while(prev<s.length() && s.charAt(prev)!=s.charAt(j))
                    {
                        h.remove(s.charAt(prev));
                        prev++;
                    }
                       h.remove(s.charAt(prev));
                       prev++;
                       i=j-1;
                       break;
                   }
                   j++;
                    
               }
                  i=j-1;  
             
                 
                
         }
           if(ans==0)
           {
               ans=s.length();
           }
          ans=Math.max(ans,j-prev);
         return ans;
    }
}







------------------------------------------------------------------------------------------------------------






optimal approach



class Solution {
    public int lengthOfLongestSubstring(String s) {
       HashMap<Character,Integer>h=new HashMap<Character,Integer>();
         int right=0;
         int prev=0;
          int ans=0;
          for(right=0;right<s.length();right++)
          {
              if(!h.containsKey(s.charAt(right)))
              {
                  h.put(s.charAt(right),right);
              }
              else{
                  
                  ans=Math.max(ans,right-prev);
                  prev=Math.max(prev,h.get(s.charAt(right))+1);
                  h.put(s.charAt(right),right);
              }
          }
           if(ans==0)
           {
               ans=s.length();
           }
           ans=Math.max(ans,right-prev);
        return ans;
    }
}