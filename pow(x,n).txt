class Solution {
    public double myPow(double x, int n) {
        long power=n;
         double ans=1.0;
            if(power<0)
            {
                power=-1*power;
            }
            while(power>0)
            {
                if(((power)&(1L))==0)
                {
                   x=x*x;
                    power=power/2;
                }
                else{
                    ans=ans*x;
                    power=power-1;
                }
            }
           if(n<0)
           {
               ans=(double)1.0/(double)ans;
                
           }
        return ans;
    }
}

















//recursive approach


class Solution {
    public double myPow(double x, int n) {
        long power=n;
         double ans=1.0;
            if(power<0)
            {
                power=-1*power;
            }
            ans=Solution.cal(x,power);
           if(n<0)
           {
               ans=(double)1.0/(double)ans;
                
           }
        return ans;
    }
    static double cal(double x,long n)
    {
         if(n==0)
         {
             return 1.0;
         }
        double ans=cal(x,n/2);
           if(n%2==0)
           {
             return ans*ans;   
           }
        else{
            return ans*ans*x;
        }
    }
    
    
}